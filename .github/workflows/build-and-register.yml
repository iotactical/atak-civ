name: Build SDK and Register with Defense Builders

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iotactical/dbsdk-atak-civ
  GIST_NAME: sdk-versions-atak-civ.json

jobs:
  discover-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.discover.outputs.versions }}
      sdk_versions_json: ${{ steps.generate-json.outputs.sdk_versions_json }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Discover SDK versions from directory structure
        id: discover
        run: |
          echo "=== Debug: Listing directories ==="
          ls -la
          echo "=== Debug: Looking for ATAK-CIV directories ==="
          ls -d ATAK-CIV-*-SDK/ || echo "No ATAK-CIV directories found"
          
          # Find all ATAK-CIV SDK version directories
          versions=()
          
          # Look for ATAK-CIV-*-SDK directories and extract version from directory name
          for dir in ATAK-CIV-*-SDK/; do
            if [[ -d "$dir" ]]; then
              echo "=== Debug: Processing directory $dir ==="
              # Extract version from directory name (e.g., ATAK-CIV-5.5.0.5-SDK -> 5.5.0.5)
              version=$(echo "$dir" | sed 's/ATAK-CIV-\(.*\)-SDK\//\1/')
              echo "=== Debug: Extracted version: '$version' ==="
              if [[ -n "$version" && "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                versions+=("$version")
                echo "Found version: $version in $dir"
              else
                echo "Skipping invalid version format: $version in $dir"
              fi
            fi
          done
          
          echo "=== Debug: All versions found: ${versions[@]} ==="
          
          # Remove duplicates and sort
          if [[ ${#versions[@]} -gt 0 ]]; then
            sorted_versions=($(printf '%s\n' "${versions[@]}" | sort -uV))
            echo "=== Debug: Sorted versions: ${sorted_versions[@]} ==="
            
            # Create JSON array manually to avoid jq issues
            versions_json="["
            for i in "${!sorted_versions[@]}"; do
              if [[ $i -gt 0 ]]; then
                versions_json+=","
              fi
              versions_json+="\"${sorted_versions[$i]}\""
            done
            versions_json+="]"
            
            echo "=== Debug: Generated JSON: $versions_json ==="
            echo "versions=$versions_json" >> $GITHUB_OUTPUT
          else
            echo "::error::No SDK versions found in directory structure"
            exit 1
          fi
          
      - name: Generate sdk-versions.json
        id: generate-json
        run: |
          versions='${{ steps.discover.outputs.versions }}'
          
          # Determine latest version (highest semver)
          latest_version=$(echo "$versions" | jq -r '.[]' | sort -V | tail -1)
          echo "Latest version: $latest_version"
          
          # Generate SDK versions JSON structure
          sdk_json=$(jq -n \
            --argjson versions "$versions" \
            --arg latest_version "$latest_version" \
            --arg image_base "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
            '{
              "atak-civ": {
                "name": "ATAK CIV SDK",
                "description": "Android Team Awareness Kit Civilian SDK",
                "versions": [
                  ($versions[] | {
                    "version": .,
                    "label": (if . == $latest_version then "\(.) (Latest)" else . end),
                    "container": "\($image_base):\(.)",
                    "java_version": "11",
                    "gradle_version": "7.6",
                    "android_api": "30",
                    "is_latest": (. == $latest_version),
                    "release_notes": (
                      if . == "5.5.0.5" then 
                        "Latest stable release with enhanced features and bug fixes"
                      elif . == "5.4.0.21" then 
                        "Stable release with improved performance and compatibility"
                      elif . == "5.3.0.12" then 
                        "Legacy stable release for compatibility testing"
                      else 
                        "ATAK-CIV version \(.) built from commit ${{ github.sha }}"
                      end
                    )
                  })
                ],
                "templates": [
                  {
                    "id": "basic",
                    "name": "Basic Plugin",
                    "description": "Simple ATAK plugin with basic functionality and core SDK integration"
                  },
                  {
                    "id": "advanced", 
                    "name": "Advanced Plugin",
                    "description": "Complex plugin with UI components, data integration, and advanced ATAK features"
                  },
                  {
                    "id": "custom",
                    "name": "Custom Template",
                    "description": "Minimal setup for experienced developers who prefer to build from scratch"
                  }
                ]
              }
            }')
          
          # Validate JSON syntax
          if ! echo "$sdk_json" | jq empty; then
            echo "::error::Generated JSON is invalid"
            echo "$sdk_json"
            exit 1
          fi
          
          echo "Generated valid sdk-versions.json"
          {
            echo "sdk_versions_json<<EOF"
            echo "$sdk_json"
            echo "EOF"
          } >> $GITHUB_OUTPUT

  validate-registry:
    needs: discover-versions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout defense-builders-sdk for schema
        uses: actions/checkout@v4
        with:
          repository: iotactical/defense-builders-sdk
          path: defense-builders-sdk
          
      - name: Setup Node.js for validation
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install validation tools
        run: npm install -g ajv-cli
        
      - name: Write generated JSON to file
        run: |
          echo '${{ needs.discover-versions.outputs.sdk_versions_json }}' > sdk-versions.json
          
      - name: Validate against schema
        run: |
          ajv validate -s defense-builders-sdk/schema/sdk-versions-schema.json -d sdk-versions.json
          echo "âœ… SDK registry JSON is valid"

  build-containers:
    needs: discover-versions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(needs.discover-versions.outputs.versions) }}
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.version }}
            type=raw,value=latest,enable=${{ matrix.version == '5.5.0.5' }}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SDK_VERSION=${{ matrix.version }}
            BUILD_DATE=${{ github.run_number }}
            GIT_SHA=${{ github.sha }}
          
      - name: Make container public
        run: |
          # Make the container package public for community access
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/iotactical/packages/container/dbsdk-atak-civ \
            -d '{"visibility":"public"}' || echo "Failed to make package public - may need manual intervention"

  register-with-defense-builders:
    needs: [discover-versions, validate-registry, build-containers]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Update SDK registry gist
        run: |
          # Write the JSON to a file
          echo '${{ needs.discover-versions.outputs.sdk_versions_json }}' > sdk-versions-atak-civ.json
          
          # Check if gist exists
          gist_id=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GIST_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/iotactical/gists" \
            | jq -r '.[] | select(.files."${{ env.GIST_NAME }}" != null) | .id' | head -1)
          
          if [[ "$gist_id" != "null" && -n "$gist_id" ]]; then
            # Update existing gist
            echo "Updating existing gist: $gist_id"
            curl -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GIST_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/gists/$gist_id" \
              -d "{
                \"description\": \"ATAK CIV SDK versions for Defense Builders\",
                \"files\": {
                  \"${{ env.GIST_NAME }}\": {
                    \"content\": $(cat sdk-versions-atak-civ.json | jq -R -s .)
                  }
                }
              }"
          else
            # Create new gist
            echo "Creating new gist"
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GIST_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/gists" \
              -d "{
                \"description\": \"ATAK CIV SDK versions for Defense Builders\",
                \"public\": true,
                \"files\": {
                  \"${{ env.GIST_NAME }}\": {
                    \"content\": $(cat sdk-versions-atak-civ.json | jq -R -s .)
                  }
                }
              }"
          fi
          
          echo "âœ… Gist updated successfully"
          
      - name: Trigger Defense Builders SDK update
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GIST_TOKEN }}
          repository: iotactical/defense-builders-sdk
          event-type: sdk-registry-update
          client-payload: |
            {
              "sdk_name": "atak-civ",
              "gist_name": "${{ env.GIST_NAME }}",
              "organization": "iotactical",
              "repository": "${{ github.repository }}",
              "commit_sha": "${{ github.sha }}",
              "versions": ${{ needs.discover-versions.outputs.versions }}
            }